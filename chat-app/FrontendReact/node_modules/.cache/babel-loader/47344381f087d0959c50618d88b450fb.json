{"ast":null,"code":"import AuthService from '../../../services/auth.service'; // export const createUser = (user) => {\n//   return {\n//       type: types.AUTH_CREATE_USER,\n//       user,\n//   }\n// }\n\nexport const isSignedInUser = isLoggedIn => {\n  return {\n    type: \"IS_LOGGED_IN\",\n    isLoggedIn\n  };\n};\nexport const setIsFetching = isFetching => {\n  return {\n    type: \"IS_FETCHING\",\n    isFetching\n  };\n};\nexport function signIn(user) {\n  return async dispatch => {\n    await dispatch(setIsFetching(true));\n    await AuthService.loginUser(user).then(async response => {\n      let a = await response.json();\n      return a;\n    }).then(response => {\n      if (response.status === 500) {\n        dispatch(setIsFetching(false));\n        alert(response.msg);\n      } else if (response.userToken && response.status === 200) {\n        localStorage.setItem('userToken', response.userToken);\n        dispatch(isSignedInUser(true));\n      } else {\n        throw new Error('Unknown error');\n      }\n    }).catch(error => {\n      alert(error.message);\n      dispatch(setIsFetching(false));\n    });\n  };\n}","map":{"version":3,"sources":["/home/serafym/Общедоступные/development/ChatApp/chat-app/FrontendReact/src/redux/actions/authActions/auth.actions.js"],"names":["AuthService","isSignedInUser","isLoggedIn","type","setIsFetching","isFetching","signIn","user","dispatch","loginUser","then","response","a","json","status","alert","msg","userToken","localStorage","setItem","Error","catch","error","message"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gCAAxB,C,CAIA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AAC5C,SAAO;AACHC,IAAAA,IAAI,EAAE,cADH;AAEHD,IAAAA;AAFG,GAAP;AAID,CALM;AAOP,OAAO,MAAME,aAAa,GAAIC,UAAD,IAAgB;AAC3C,SAAO;AACHF,IAAAA,IAAI,EAAE,aADH;AAEHE,IAAAA;AAFG,GAAP;AAID,CALM;AAOP,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACzB,SAAO,MAAOC,QAAP,IAAoB;AACrB,UAAMA,QAAQ,CAACJ,aAAa,CAAC,IAAD,CAAd,CAAd;AACA,UAAMJ,WAAW,CAACS,SAAZ,CAAsBF,IAAtB,EACLG,IADK,CACA,MAAOC,QAAP,IAAoB;AACxB,UAAIC,CAAC,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAd;AACA,aAAQD,CAAR;AACD,KAJK,EAKLF,IALK,CAKCC,QAAD,IAAY;AAChB,UAAGA,QAAQ,CAACG,MAAT,KAAkB,GAArB,EAA0B;AACxBN,QAAAA,QAAQ,CAACJ,aAAa,CAAC,KAAD,CAAd,CAAR;AACAW,QAAAA,KAAK,CAACJ,QAAQ,CAACK,GAAV,CAAL;AACD,OAHD,MAIK,IAAGL,QAAQ,CAACM,SAAT,IAAqBN,QAAQ,CAACG,MAAT,KAAmB,GAA3C,EAA+C;AACpDI,QAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCR,QAAQ,CAACM,SAA3C;AACAT,QAAAA,QAAQ,CAACP,cAAc,CAAC,IAAD,CAAf,CAAR;AACC,OAHI,MAGE;AACL,cAAM,IAAImB,KAAJ,CAAU,eAAV,CAAN;AACD;AACF,KAhBK,EAiBLC,KAjBK,CAiBCC,KAAK,IAAI;AAACP,MAAAA,KAAK,CAACO,KAAK,CAACC,OAAP,CAAL;AAAsBf,MAAAA,QAAQ,CAACJ,aAAa,CAAC,KAAD,CAAd,CAAR;AAA+B,KAjBhE,CAAN;AAkBH,GApBH;AAqBH","sourcesContent":["import AuthService from '../../../services/auth.service';\n\n\n\n// export const createUser = (user) => {\n//   return {\n//       type: types.AUTH_CREATE_USER,\n//       user,\n//   }\n// }\n\nexport const isSignedInUser = (isLoggedIn) => {\n  return {\n      type: \"IS_LOGGED_IN\",\n      isLoggedIn,\n  }\n}\n\nexport const setIsFetching = (isFetching) => {\n  return {\n      type: \"IS_FETCHING\",\n      isFetching,\n  }\n}\n\nexport function signIn(user) {\n    return async (dispatch) => {\n          await dispatch(setIsFetching(true))\n          await AuthService.loginUser(user)\n          .then(async (response) => {\n            let a = await response.json();\n            return  a;\n          })\n          .then((response)=>{\n            if(response.status===500) {\n              dispatch(setIsFetching(false))\n              alert(response.msg)\n            }\n            else if(response.userToken&& response.status ===200){\n            localStorage.setItem('userToken', response.userToken);\n            dispatch(isSignedInUser(true))\n            } else {\n              throw new Error('Unknown error')\n            }\n          })\n          .catch(error => {alert(error.message); dispatch(setIsFetching(false))});\n      };\n}\n\n"]},"metadata":{},"sourceType":"module"}