{"ast":null,"code":"import AuthService from \"../../../services/auth.service\";\nimport * as actionTypes from './actions.types';\nexport const isSignedInUser = isLoggedIn => {\n  return {\n    type: actionTypes.IS_LOGGED_IN,\n    isLoggedIn\n  };\n};\nexport const setIsFetching = isFetching => {\n  return {\n    type: actionTypes.IS_FETCHING,\n    isFetching\n  };\n};\nexport function signIn(user) {\n  return async dispatch => {\n    await dispatch(setIsFetching(true));\n    await AuthService.loginUser(user).then(response => {\n      if (response.status === 500) {\n        dispatch(setIsFetching(false));\n        alert(response.msg);\n      } else if (response.userToken && response.status === 200) {\n        localStorage.setItem(\"userToken\", response.userToken);\n        dispatch(isSignedInUser(true));\n      } else {\n        throw new Error(\"Unknown error\");\n      }\n    }).catch(error => {\n      alert(error.message);\n      dispatch(setIsFetching(false));\n    });\n  };\n}","map":{"version":3,"sources":["/home/serafym/Общедоступные/ChatApp/chat-app/FrontendReact/src/redux/actions/authActions/auth.actions.js"],"names":["AuthService","actionTypes","isSignedInUser","isLoggedIn","type","IS_LOGGED_IN","setIsFetching","isFetching","IS_FETCHING","signIn","user","dispatch","loginUser","then","response","status","alert","msg","userToken","localStorage","setItem","Error","catch","error","message"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gCAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,iBAA7B;AAEA,OAAO,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AAC5C,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI,YADb;AAELF,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,aAAa,GAAIC,UAAD,IAAgB;AAC3C,SAAO;AACLH,IAAAA,IAAI,EAAEH,WAAW,CAACO,WADb;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,SAASE,MAAT,CAAgBC,IAAhB,EAAsB;AAC3B,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMA,QAAQ,CAACL,aAAa,CAAC,IAAD,CAAd,CAAd;AACA,UAAMN,WAAW,CAACY,SAAZ,CAAsBF,IAAtB,EACHG,IADG,CACGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BJ,QAAAA,QAAQ,CAACL,aAAa,CAAC,KAAD,CAAd,CAAR;AACAU,QAAAA,KAAK,CAACF,QAAQ,CAACG,GAAV,CAAL;AACD,OAHD,MAGO,IAAIH,QAAQ,CAACI,SAAT,IAAsBJ,QAAQ,CAACC,MAAT,KAAoB,GAA9C,EAAmD;AACxDI,QAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCN,QAAQ,CAACI,SAA3C;AACAP,QAAAA,QAAQ,CAACT,cAAc,CAAC,IAAD,CAAf,CAAR;AACD,OAHM,MAGA;AACL,cAAM,IAAImB,KAAJ,CAAU,eAAV,CAAN;AACD;AACF,KAXG,EAYHC,KAZG,CAYIC,KAAD,IAAW;AAChBP,MAAAA,KAAK,CAACO,KAAK,CAACC,OAAP,CAAL;AACAb,MAAAA,QAAQ,CAACL,aAAa,CAAC,KAAD,CAAd,CAAR;AACD,KAfG,CAAN;AAgBD,GAlBD;AAmBD","sourcesContent":["import AuthService from \"../../../services/auth.service\";\nimport * as actionTypes from './actions.types'\n\nexport const isSignedInUser = (isLoggedIn) => {\n  return {\n    type: actionTypes.IS_LOGGED_IN,\n    isLoggedIn,\n  };\n};\n\nexport const setIsFetching = (isFetching) => {\n  return {\n    type: actionTypes.IS_FETCHING,\n    isFetching,\n  };\n};\n\nexport function signIn(user) {\n  return async (dispatch) => {\n    await dispatch(setIsFetching(true));\n    await AuthService.loginUser(user)\n      .then((response) => {\n        if (response.status === 500) {\n          dispatch(setIsFetching(false));\n          alert(response.msg);\n        } else if (response.userToken && response.status === 200) {\n          localStorage.setItem(\"userToken\", response.userToken);\n          dispatch(isSignedInUser(true));\n        } else {\n          throw new Error(\"Unknown error\");\n        }\n      })\n      .catch((error) => {\n        alert(error.message);\n        dispatch(setIsFetching(false));\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}