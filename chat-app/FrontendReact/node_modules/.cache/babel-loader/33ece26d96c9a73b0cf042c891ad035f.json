{"ast":null,"code":"import AuthService from '../../../services/auth.service'; // export const createUser = (user) => {\n//   return {\n//       type: types.AUTH_CREATE_USER,\n//       user,\n//   }\n// }\n\nexport const isSignedInUser = isLoggedIn => {\n  return {\n    type: \"IS_LOGGED_IN\",\n    isLoggedIn\n  };\n};\nexport function signIn(user) {\n  return async dispatch => {\n    await AuthService.loginUser(user).then(async response => {\n      let a = await response.json();\n      return a;\n    }).then(response => {\n      if (response.status === 500) {\n        alert(response.msg);\n      }\n\n      if (response.userToken && response.status === 200) {\n        localStorage.setItem('userToken', response.userToken);\n        dispatch(isSignedInUser(true));\n      }\n    }).catch(error => console.log(error));\n  };\n}","map":{"version":3,"sources":["/home/serafym/Общедоступные/development/ChatApp/chat-app/FrontendReact/src/redux/actions/authActions/auth.actions.js"],"names":["AuthService","isSignedInUser","isLoggedIn","type","signIn","user","dispatch","loginUser","then","response","a","json","status","alert","msg","userToken","localStorage","setItem","catch","error","console","log"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gCAAxB,C,CAIA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AAC5C,SAAO;AACHC,IAAAA,IAAI,EAAE,cADH;AAEHD,IAAAA;AAFG,GAAP;AAID,CALM;AAOP,OAAO,SAASE,MAAT,CAAgBC,IAAhB,EAAsB;AACzB,SAAO,MAAOC,QAAP,IAAoB;AACrB,UAAMN,WAAW,CAACO,SAAZ,CAAsBF,IAAtB,EACLG,IADK,CACA,MAAOC,QAAP,IAAoB;AACxB,UAAIC,CAAC,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAd;AACA,aAAQD,CAAR;AACD,KAJK,EAKLF,IALK,CAKCC,QAAD,IAAY;AAChB,UAAGA,QAAQ,CAACG,MAAT,KAAkB,GAArB,EAA0B;AACxBC,QAAAA,KAAK,CAACJ,QAAQ,CAACK,GAAV,CAAL;AACD;;AACD,UAAGL,QAAQ,CAACM,SAAT,IAAqBN,QAAQ,CAACG,MAAT,KAAmB,GAA3C,EAA+C;AAC/CI,QAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCR,QAAQ,CAACM,SAA3C;AACAT,QAAAA,QAAQ,CAACL,cAAc,CAAC,IAAD,CAAf,CAAR;AACD;AACA,KAbK,EAcLiB,KAdK,CAcCC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAdV,CAAN;AAeH,GAhBH;AAiBH","sourcesContent":["import AuthService from '../../../services/auth.service';\n\n\n\n// export const createUser = (user) => {\n//   return {\n//       type: types.AUTH_CREATE_USER,\n//       user,\n//   }\n// }\n\nexport const isSignedInUser = (isLoggedIn) => {\n  return {\n      type: \"IS_LOGGED_IN\",\n      isLoggedIn,\n  }\n}\n\nexport function signIn(user) {\n    return async (dispatch) => {\n          await AuthService.loginUser(user)\n          .then(async (response) => {\n            let a = await response.json();\n            return  a;\n          })\n          .then((response)=>{\n            if(response.status===500) {\n              alert(response.msg)\n            }\n            if(response.userToken&& response.status ===200){\n            localStorage.setItem('userToken', response.userToken);\n            dispatch(isSignedInUser(true))\n          }\n          })\n          .catch(error => console.log(error));\n      };\n}\n\n"]},"metadata":{},"sourceType":"module"}