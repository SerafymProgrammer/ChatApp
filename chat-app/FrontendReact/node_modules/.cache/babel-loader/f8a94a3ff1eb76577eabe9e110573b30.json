{"ast":null,"code":"var _jsxFileName = \"/home/serafym/\\u041E\\u0431\\u0449\\u0435\\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u044B\\u0435/ChatApp/chat-app/FrontendReact/src/components/chatPage/chat.jsx\";\nimport React, { useEffect, useCallback, useState } from \"react\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport InputMessageForm from \"./chat-components/inputMessage\";\nimport MessageContainer from \"./chat-components/messageContainer\";\nimport UsersList from \"./chat-components/usersContainer\";\nimport * as actions from \"../../redux/actions/chatActions/chat.actions\";\nimport * as authActions from \"../../redux/actions/authActions/auth.actions\";\nimport ChatService from \"../../services/chat.service\";\nimport { Container } from \"@material-ui/core\";\nimport Header from \"./chat-components/chatHeader\";\nimport store from \"store\";\nimport { ChatList } from \"react-chat-elements\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => ({\n  chatContainer: {\n    background: \"#6d81af\",\n    display: \"flex\",\n    flexDirection: \"row-reverse\",\n    margin: 0,\n    padding: 0,\n    height: 800,\n    position: \"relative\",\n    maxHeight: 1000,\n    [theme.breakpoints.down(\"xs\")]: {\n      height: 300,\n      maxHeight: 600\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      height: 600,\n      maxHeight: 800\n    }\n  },\n  chatList: {\n    width: 400\n  }\n}));\n\nconst ChatPage = props => {\n  const classes = useStyles();\n  const {\n    nickNameColor,\n    isAdmin,\n    nickName\n  } = store.get(\"userData\");\n  let colorNickName = nickNameColor;\n  const [messages, setMessages] = useState([]);\n  const [isCurrentUserAdmin, setIsAdmin] = useState(false);\n  const [currentUserNickName, setNickName] = useState(\"\");\n  const [isMuted, setIsMuted] = useState(false);\n  const [showUsersContainer, setShowUsersContainer] = useState(true);\n  const [showRoomsContainer, setShowRoomsContainer] = useState(false);\n  const dispatch = useDispatch();\n  const isConnected = useSelector(state => state.chatReducer.isConnected, shallowEqual);\n  const users = useSelector(state => state.chatReducer.users, shallowEqual);\n  const socket = useSelector(state => state.chatReducer.socket, shallowEqual);\n  const roomName = useSelector(state => state.chatReducer.roomName, shallowEqual);\n  const initConnection = useCallback(() => dispatch(actions.initWebSocketConnection(dispatch)), [dispatch]);\n  const setUsers = useCallback(user => dispatch(actions.setUsers(user)), [dispatch]);\n  const setIsConnected = useCallback(status => dispatch(actions.isConnected(status)), [dispatch]);\n  const isSignedInUser = useCallback(status => dispatch(authActions.isSignedInUser(status)), [dispatch]);\n  const logout = useCallback(() => {\n    socket.disconnect(true);\n    disconnnectAndLogout();\n  });\n  const disconnnectAndLogout = useCallback(() => {\n    store.clearAll();\n    isSignedInUser(false);\n    ChatService.changeExists();\n    props.history.push(\"/login\");\n  });\n\n  const setMuteStatus = id => socket.emit(\"mute\", id);\n\n  const setBan = id => socket.emit(\"ban\", id);\n\n  const sendMsg = useCallback(textMessage => socket.emit(\"chat\", {\n    textMessage,\n    roomName\n  }));\n  useEffect(() => {\n    initConnection();\n\n    if (socket) {\n      socket.on(\"users\", res => setUsers(res));\n      socket.on(\"previousMessages\", res => setMessages(res));\n      socket.on(\"error\", msg => {\n        alert(msg);\n        props.history.push(\"/login\");\n      });\n      socket.on(\"initialMuteStatus\", isMuted => setIsMuted(isMuted));\n      socket.on(\"rooms\", res => {});\n      socket.on(\"mute\", isMuted => setIsMuted(isMuted));\n      socket.on(\"chat\", msg => setMessages([...messages, msg]));\n      socket.on(\"disconnect\", socket => {\n        disconnnectAndLogout();\n      });\n      setIsAdmin(isAdmin);\n      setNickName(nickName);\n      setIsConnected(true);\n    }\n\n    return () => setIsConnected(false);\n  }, [users, socket, messages]);\n  return isConnected && users.length > 0 ? /*#__PURE__*/React.createElement(Container, {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    username: nickName,\n    colorNickName: colorNickName,\n    showHideUsersList: () => setShowUsersContainer(!showUsersContainer),\n    logout: () => logout(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }), roomName === \"default\" ? /*#__PURE__*/React.createElement(Container, {\n    className: classes.chatContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UsersList, {\n    users: users,\n    isAdmin: isCurrentUserAdmin,\n    userName: currentUserNickName,\n    setMuteStatus: user => setMuteStatus(user),\n    setBan: user => setBan(user),\n    showUsersContainer: showUsersContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MessageContainer, {\n    messages: messages,\n    username: nickName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(Container, {\n    className: classes.chatContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MessageContainer, {\n    messages: messages,\n    username: nickName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  })), !isMuted ? /*#__PURE__*/React.createElement(InputMessageForm, {\n    handleSubmit: message => sendMsg(message),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }) : null) : null;\n};\n\nexport default ChatPage;","map":{"version":3,"sources":["/home/serafym/Общедоступные/ChatApp/chat-app/FrontendReact/src/components/chatPage/chat.jsx"],"names":["React","useEffect","useCallback","useState","useDispatch","useSelector","shallowEqual","InputMessageForm","MessageContainer","UsersList","actions","authActions","ChatService","Container","Header","store","ChatList","makeStyles","useStyles","theme","chatContainer","background","display","flexDirection","margin","padding","height","position","maxHeight","breakpoints","down","chatList","width","ChatPage","props","classes","nickNameColor","isAdmin","nickName","get","colorNickName","messages","setMessages","isCurrentUserAdmin","setIsAdmin","currentUserNickName","setNickName","isMuted","setIsMuted","showUsersContainer","setShowUsersContainer","showRoomsContainer","setShowRoomsContainer","dispatch","isConnected","state","chatReducer","users","socket","roomName","initConnection","initWebSocketConnection","setUsers","user","setIsConnected","status","isSignedInUser","logout","disconnect","disconnnectAndLogout","clearAll","changeExists","history","push","setMuteStatus","id","emit","setBan","sendMsg","textMessage","on","res","msg","alert","length","message"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from \"react\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport InputMessageForm from \"./chat-components/inputMessage\";\nimport MessageContainer from \"./chat-components/messageContainer\";\nimport UsersList from \"./chat-components/usersContainer\";\nimport * as actions from \"../../redux/actions/chatActions/chat.actions\";\nimport * as authActions from \"../../redux/actions/authActions/auth.actions\";\nimport ChatService from \"../../services/chat.service\";\nimport { Container } from \"@material-ui/core\";\nimport Header from \"./chat-components/chatHeader\";\nimport store from \"store\";\nimport { ChatList } from \"react-chat-elements\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  chatContainer: {\n    background: \"#6d81af\",\n    display: \"flex\",\n    flexDirection: \"row-reverse\",\n    margin: 0,\n    padding: 0,\n    height: 800,\n    position: \"relative\",\n    maxHeight: 1000,\n    [theme.breakpoints.down(\"xs\")]: {\n      height: 300,\n      maxHeight: 600,\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      height: 600,\n      maxHeight: 800,\n    },\n  },\n  chatList: {\n    width: 400, \n  }\n}));\n\nconst ChatPage = (props) => {\n  const classes = useStyles();\n\n  const { nickNameColor, isAdmin, nickName } = store.get(\"userData\");\n  let colorNickName = nickNameColor;\n\n  const [messages, setMessages] = useState([]);\n  const [isCurrentUserAdmin, setIsAdmin] = useState(false);\n  const [currentUserNickName, setNickName] = useState(\"\");\n  const [isMuted, setIsMuted] = useState(false);\n  const [showUsersContainer, setShowUsersContainer] = useState(true);\n  const [showRoomsContainer, setShowRoomsContainer] = useState(false);\n  const dispatch = useDispatch();\n\n  const isConnected = useSelector(\n    (state) => state.chatReducer.isConnected,\n    shallowEqual\n  );\n  const users = useSelector((state) => state.chatReducer.users, shallowEqual);\n  const socket = useSelector((state) => state.chatReducer.socket, shallowEqual);\n  const roomName = useSelector(\n    (state) => state.chatReducer.roomName,\n    shallowEqual\n  );\n\n  const initConnection = useCallback(\n    () => dispatch(actions.initWebSocketConnection(dispatch)),\n    [dispatch]\n  );\n  const setUsers = useCallback((user) => dispatch(actions.setUsers(user)), [\n    dispatch,\n  ]);\n  const setIsConnected = useCallback(\n    (status) => dispatch(actions.isConnected(status)),\n    [dispatch]\n  );\n  const isSignedInUser = useCallback(\n    (status) => dispatch(authActions.isSignedInUser(status)),\n    [dispatch]\n  );\n  const logout = useCallback(() => {\n    socket.disconnect(true);\n    disconnnectAndLogout();\n  });\n  const disconnnectAndLogout = useCallback(() => {\n    store.clearAll();\n    isSignedInUser(false);\n    ChatService.changeExists();\n    props.history.push(\"/login\");\n  });\n\n  const setMuteStatus = (id) => socket.emit(\"mute\", id);\n  const setBan = (id) => socket.emit(\"ban\", id);\n  const sendMsg = useCallback((textMessage) => socket.emit(\"chat\", {textMessage, roomName}));\n\n  useEffect(() => {\n    initConnection();\n    if (socket) {\n      socket.on(\"users\", (res) => setUsers(res));\n\n      socket.on(\"previousMessages\", (res) => setMessages(res));\n\n      socket.on(\"error\", (msg) => {\n        alert(msg);\n        props.history.push(\"/login\");\n      });\n\n      socket.on(\"initialMuteStatus\", (isMuted) => setIsMuted(isMuted));\n\n      socket.on(\"rooms\", (res) => {\n        \n      });\n\n      socket.on(\"mute\", (isMuted) => setIsMuted(isMuted));\n\n      socket.on(\"chat\", (msg) => setMessages([...messages, msg]));\n\n      socket.on(\"disconnect\", (socket) => {\n        disconnnectAndLogout();\n      });\n      setIsAdmin(isAdmin);\n      setNickName(nickName);\n      setIsConnected(true);\n    }\n    return () => setIsConnected(false);\n  }, [users, socket, messages]);\n\n  return isConnected && users.length > 0 ? (\n    <Container style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <Header\n        username={nickName}\n        colorNickName={colorNickName}\n        showHideUsersList={() => setShowUsersContainer(!showUsersContainer)}\n        logout={() => logout()}\n      />\n      {roomName === \"default\" ? (\n        <Container className={classes.chatContainer}>\n          {/* <ChatList\n            className=\"chatList\"\n            dataSource={[\n              {\n                title: \"Facebook\",\n                subtitle: \"What are you doing?\",\n                date: new Date(),\n                unread: 0,\n              },\n              {\n                title: \"Facebook\",\n                subtitle: \"What are you doing?\",\n                date: new Date(),\n                unread: 0,\n              },\n              {\n                title: \"Facebook\",\n                subtitle: \"What are you doing?\",\n                date: new Date(),\n                unread: 0,\n              },\n            ]}\n            onClick={()=>alert('sdfsfds')}\n          /> */}\n          <UsersList\n            users={users}\n            isAdmin={isCurrentUserAdmin}\n            userName={currentUserNickName}\n            setMuteStatus={(user) => setMuteStatus(user)}\n            setBan={(user) => setBan(user)}\n            showUsersContainer={showUsersContainer}\n          />\n          <MessageContainer messages={messages} username={nickName} />\n        </Container>\n      ) : (\n        <Container className={classes.chatContainer}>\n          <MessageContainer messages={messages} username={nickName} />\n        </Container>\n      )}\n      {!isMuted ? (\n        <InputMessageForm handleSubmit={(message) => sendMsg(message)} />\n      ) : null}\n    </Container>\n  ) : null;\n};\n\nexport default ChatPage;\n"]},"metadata":{},"sourceType":"module"}