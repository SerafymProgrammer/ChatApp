{"ast":null,"code":"var _jsxFileName = \"/home/serafym/\\u041E\\u0431\\u0449\\u0435\\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u044B\\u0435/development/ChatApp/chat-app/FrontendReact/src/components/chatPage/chat-components/messageContainer.jsx\";\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/core/styles\";\nimport Message from \"./message\";\nimport moment from \"moment\";\nconst MessagesContainer = styled(Container)({\n  background: \"inherit\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  overflowY: \"scroll\",\n  height: \"inherit\",\n  maxHeight: \"inherit\"\n});\n\nconst MessageContainer = props => {\n  const {\n    messages,\n    username\n  } = props;\n  const myRef = useRef(null);\n  useEffect(() => {\n    console.log('ref', myRef);\n    myRef.current.scrollTop = 50;\n  }, [messages, myRef]); //   const GenMessage = (item, index) => (\n  //     <Message\n  //     key = {`key-msg-${index}`}\n  //     timeMessage={moment(item.timeMessage).calendar()}\n  //     authorMessage={item.authorMessage}\n  //     textMessage={item.textMessage}\n  //     username={username}\n  //     colorNickName={item.colorAuthorName}\n  //    />\n  //   )\n\n  return /*#__PURE__*/React.createElement(MessagesContainer, {\n    ref: myRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, messages.map((item, index) => /*#__PURE__*/React.createElement(Message, {\n    key: `key-msg-${index}`,\n    timeMessage: moment(item.timeMessage).calendar(),\n    authorMessage: item.authorMessage,\n    textMessage: item.textMessage,\n    username: username,\n    colorNickName: item.colorAuthorName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default MessageContainer;","map":{"version":3,"sources":["/home/serafym/Общедоступные/development/ChatApp/chat-app/FrontendReact/src/components/chatPage/chat-components/messageContainer.jsx"],"names":["React","useState","useEffect","useCallback","useRef","Container","styled","Message","moment","MessagesContainer","background","display","flexDirection","overflowY","height","maxHeight","MessageContainer","props","messages","username","myRef","console","log","current","scrollTop","map","item","index","timeMessage","calendar","authorMessage","textMessage","colorAuthorName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,MAAlD,QAAgE,OAAhE;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,MAAMC,iBAAiB,GAAGH,MAAM,CAACD,SAAD,CAAN,CAAkB;AAC1CK,EAAAA,UAAU,EAAE,SAD8B;AAE1CC,EAAAA,OAAO,EAAE,MAFiC;AAG1CC,EAAAA,aAAa,EAAE,QAH2B;AAI1CC,EAAAA,SAAS,EAAE,QAJ+B;AAK1CC,EAAAA,MAAM,EAAE,SALkC;AAM1CC,EAAAA,SAAS,EAAE;AAN+B,CAAlB,CAA1B;;AASA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBF,KAA/B;AACA,QAAMG,KAAK,GAAGhB,MAAM,CAAC,IAAD,CAApB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AAEdmB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,KAAnB;AACAA,IAAAA,KAAK,CAACG,OAAN,CAAcC,SAAd,GAA0B,EAA1B;AAEH,GALU,EAKR,CAACN,QAAD,EAAWE,KAAX,CALQ,CAAT,CAJkC,CAWpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,sBACE,oBAAC,iBAAD;AAAmB,IAAA,GAAG,EAAIA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QAAQ,CAACO,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,kBACZ,oBAAC,OAAD;AACE,IAAA,GAAG,EAAK,WAAUA,KAAM,EAD1B;AAEE,IAAA,WAAW,EAAEnB,MAAM,CAACkB,IAAI,CAACE,WAAN,CAAN,CAAyBC,QAAzB,EAFf;AAGE,IAAA,aAAa,EAAEH,IAAI,CAACI,aAHtB;AAIE,IAAA,WAAW,EAAEJ,IAAI,CAACK,WAJpB;AAKE,IAAA,QAAQ,EAAEZ,QALZ;AAME,IAAA,aAAa,EAAEO,IAAI,CAACM,eANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF;AAcD,CAnCD;;AAqCA,eAAehB,gBAAf","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/core/styles\";\nimport Message from \"./message\";\nimport moment from \"moment\";\n\nconst MessagesContainer = styled(Container)({\n  background: \"inherit\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  overflowY: \"scroll\",\n  height: \"inherit\",\n  maxHeight: \"inherit\",\n});\n\nconst MessageContainer = (props) => {\n  const { messages, username } = props; \n  const myRef = useRef(null);\n\n  useEffect(() => {\n\n    console.log('ref', myRef);\n    myRef.current.scrollTop = 50;\n\n}, [messages, myRef]);\n\n//   const GenMessage = (item, index) => (\n//     <Message\n//     key = {`key-msg-${index}`}\n//     timeMessage={moment(item.timeMessage).calendar()}\n//     authorMessage={item.authorMessage}\n//     textMessage={item.textMessage}\n//     username={username}\n//     colorNickName={item.colorAuthorName}\n//    />\n//   )\n  return (\n    <MessagesContainer ref = {myRef}>\n      {messages.map((item, index) => (\n        <Message\n          key = {`key-msg-${index}`}\n          timeMessage={moment(item.timeMessage).calendar()}\n          authorMessage={item.authorMessage}\n          textMessage={item.textMessage}\n          username={username}\n          colorNickName={item.colorAuthorName}\n        />\n      ))}\n    </MessagesContainer>\n  );\n};\n\nexport default MessageContainer;\n"]},"metadata":{},"sourceType":"module"}