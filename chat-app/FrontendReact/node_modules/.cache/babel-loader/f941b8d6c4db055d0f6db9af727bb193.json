{"ast":null,"code":"import _regeneratorRuntime from\"/home/serafym/\\u041E\\u0431\\u0449\\u0435\\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u044B\\u0435/ChatApp/chat-app/FrontendReact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/serafym/\\u041E\\u0431\\u0449\\u0435\\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u044B\\u0435/ChatApp/chat-app/FrontendReact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import AuthService from\"../../../services/auth.service\";import*as actionTypes from'./actions.types';import store from'store';export var setIsFetching=function setIsFetching(isFetching){return{type:actionTypes.IS_FETCHING,isFetching:isFetching};};export var isSignedInUser=function isSignedInUser(isLoggedIn){return{type:actionTypes.IS_LOGGED_IN,isLoggedIn:isLoggedIn};};export function signIn(user){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return dispatch(setIsFetching(true));case 2:_context.next=4;return AuthService.loginUser(user).then(function(response){var _response$data=response.data,token=_response$data.token,isAdmin=_response$data.isAdmin,nickNameColor=_response$data.nickNameColor,nickName=_response$data.nickName;store.set(\"token\",token);store.set(\"userData\",{isAdmin:isAdmin,nickName:nickName,nickNameColor:nickNameColor});dispatch(setIsFetching(true));dispatch(isSignedInUser(true));}).catch(function(error){alert(error.response.data);dispatch(setIsFetching(false));});case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();}","map":{"version":3,"sources":["/home/serafym/Общедоступные/ChatApp/chat-app/FrontendReact/src/redux/actions/authActions/auth.actions.js"],"names":["AuthService","actionTypes","store","setIsFetching","isFetching","type","IS_FETCHING","isSignedInUser","isLoggedIn","IS_LOGGED_IN","signIn","user","dispatch","loginUser","then","response","data","token","isAdmin","nickNameColor","nickName","set","catch","error","alert"],"mappings":"ieAAA,MAAOA,CAAAA,WAAP,KAAwB,gCAAxB,CACA,MAAO,GAAKC,CAAAA,WAAZ,KAA6B,iBAA7B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,UAAD,CAAgB,CAC3C,MAAO,CACLC,IAAI,CAAEJ,WAAW,CAACK,WADb,CAELF,UAAU,CAAVA,UAFK,CAAP,CAID,CALM,CAOP,MAAO,IAAMG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,UAAD,CAAgB,CAC5C,MAAO,CACLH,IAAI,CAAEJ,WAAW,CAACQ,YADb,CAELD,UAAU,CAAVA,UAFK,CAAP,CAID,CALM,CAOP,MAAO,SAASE,CAAAA,MAAT,CAAgBC,IAAhB,CAAsB,CAC3B,+FAAO,iBAAOC,QAAP,wIACCA,CAAAA,QAAQ,CAACT,aAAa,CAAC,IAAD,CAAd,CADT,8BAECH,CAAAA,WAAW,CAACa,SAAZ,CAAsBF,IAAtB,EACHG,IADG,CACG,SAACC,QAAD,CAAc,oBAC+BA,QAAQ,CAACC,IADxC,CACZC,KADY,gBACZA,KADY,CACLC,OADK,gBACLA,OADK,CACIC,aADJ,gBACIA,aADJ,CACmBC,QADnB,gBACmBA,QADnB,CAEnBlB,KAAK,CAACmB,GAAN,CAAU,OAAV,CAAmBJ,KAAnB,EACAf,KAAK,CAACmB,GAAN,CAAU,UAAV,CAAsB,CAACH,OAAO,CAAPA,OAAD,CAAUE,QAAQ,CAARA,QAAV,CAAoBD,aAAa,CAAbA,aAApB,CAAtB,EACAP,QAAQ,CAACT,aAAa,CAAC,IAAD,CAAd,CAAR,CACAS,QAAQ,CAACL,cAAc,CAAC,IAAD,CAAf,CAAR,CACD,CAPG,EAQHe,KARG,CAQG,SAACC,KAAD,CAAW,CAChBC,KAAK,CAACD,KAAK,CAACR,QAAN,CAAeC,IAAhB,CAAL,CACAJ,QAAQ,CAACT,aAAa,CAAC,KAAD,CAAd,CAAR,CACD,CAXG,CAFD,uDAAP,+DAeD","sourcesContent":["import AuthService from \"../../../services/auth.service\";\nimport * as actionTypes from './actions.types';\nimport store from 'store';\n\nexport const setIsFetching = (isFetching) => {\n  return {\n    type: actionTypes.IS_FETCHING,\n    isFetching,\n  };\n};\n\nexport const isSignedInUser = (isLoggedIn) => {\n  return {\n    type: actionTypes.IS_LOGGED_IN,\n    isLoggedIn,\n  };\n};\n\nexport function signIn(user) {\n  return async (dispatch) => {\n    await dispatch(setIsFetching(true));\n    await AuthService.loginUser(user)\n      .then( (response) => {\n        const {token, isAdmin, nickNameColor, nickName} = response.data;\n        store.set(\"token\", token);\n        store.set(\"userData\", {isAdmin, nickName, nickNameColor});\n        dispatch(setIsFetching(true));\n        dispatch(isSignedInUser(true));\n      })\n      .catch((error) => {\n        alert(error.response.data);\n        dispatch(setIsFetching(false));\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}