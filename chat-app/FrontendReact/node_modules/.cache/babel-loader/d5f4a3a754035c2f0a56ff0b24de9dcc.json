{"ast":null,"code":"var _jsxFileName = \"/home/serafym/\\u041E\\u0431\\u0449\\u0435\\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u044B\\u0435/ChatApp/chat-app/FrontendReact/src/components/authPage/form/SignInForm.jsx\";\nimport React, { useEffect, useCallback } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useInput } from '../../hooks/useInput';\n\nconst SignInForm = ({\n  isFetching,\n  handleSubmit\n}) => {\n  const {\n    value: username,\n    bind: bindUserName,\n    reset: resetUserName\n  } = useInput('');\n  const {\n    value: password,\n    bind: bindPassword,\n    reset: resetPassword\n  } = useInput('');\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\"moreThanThreeChar\", value => {\n      return value.length > 3;\n    });\n    ValidatorForm.addValidationRule(\"notAllowedSpecialSymbols\", value => {\n      return !/[^A-zА-яЁё0-9]/.test(value);\n    });\n    return () => {\n      ValidatorForm.removeValidationRule(\"moreThanThreeChar\");\n      ValidatorForm.removeValidationRule(\"moreThanThreeChar\");\n    };\n  }, [ValidatorForm]);\n  const handleSubmitCallback = useCallback(evt => {\n    evt.preventDefault();\n    handleSubmit({\n      username,\n      password\n    });\n  }, [username, password, handleSubmit]);\n  return /*#__PURE__*/React.createElement(ValidatorForm, {\n    onSubmit: handleSubmitCallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextValidator, Object.assign({\n    fullWidth: true,\n    label: \"Username\",\n    name: \"username\"\n  }, bindUserName, {\n    validators: [\"required\", \"moreThanThreeChar\", \"notAllowedSpecialSymbols\"],\n    errorMessages: [\"this field is required\", \"3 characters minimum\", \"Not allowed special symbols\"],\n    margin: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(TextValidator, Object.assign({\n    fullWidth: true,\n    label: \"Password\",\n    type: \"password\"\n  }, bindPassword, {\n    name: \"password\",\n    validators: [\"required\"],\n    errorMessages: [\"this field is required\"],\n    margin: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    fullWidth: true,\n    color: \"primary\",\n    type: \"submit\",\n    disabled: isFetching,\n    margin: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, isFetching && /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 24\n    }\n  }), \" Sign In\"));\n};\n\nexport default SignInForm;","map":{"version":3,"sources":["/home/serafym/Общедоступные/ChatApp/chat-app/FrontendReact/src/components/authPage/form/SignInForm.jsx"],"names":["React","useEffect","useCallback","Button","ValidatorForm","TextValidator","CircularProgress","useInput","SignInForm","isFetching","handleSubmit","value","username","bind","bindUserName","reset","resetUserName","password","bindPassword","resetPassword","addValidationRule","length","test","removeValidationRule","handleSubmitCallback","evt","preventDefault"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {useInput} from '../../hooks/useInput'\n\nconst SignInForm = ({ isFetching, handleSubmit }) => {\n\n  const { value:username, bind:bindUserName, reset:resetUserName } = useInput('');\n  const { value:password, bind:bindPassword, reset:resetPassword } = useInput('');\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule(\"moreThanThreeChar\", (value) => {\n      return value.length > 3;\n    });\n    ValidatorForm.addValidationRule(\"notAllowedSpecialSymbols\", (value) => {\n      return !(/[^A-zА-яЁё0-9]/.test(value));\n    });\n\n    return () => {\n      ValidatorForm.removeValidationRule(\"moreThanThreeChar\");\n      ValidatorForm.removeValidationRule(\"moreThanThreeChar\");\n    }\n  }, [ValidatorForm]);\n\n\n  const handleSubmitCallback = useCallback((evt) => {\n    evt.preventDefault();\n    handleSubmit({username, password});\n  }, [username, password, handleSubmit]);\n\n  return (\n    <ValidatorForm  onSubmit={handleSubmitCallback}>\n      <TextValidator\n        fullWidth\n        label=\"Username\"\n        name=\"username\"\n        {...bindUserName}\n        validators={[\n          \"required\",\n          \"moreThanThreeChar\",\n          \"notAllowedSpecialSymbols\",\n        ]}\n        errorMessages={[\n          \"this field is required\",\n          \"3 characters minimum\",\n          \"Not allowed special symbols\",\n        ]}\n        margin=\"normal\"\n      />\n      <TextValidator\n        fullWidth\n        label=\"Password\"\n        type=\"password\"\n        {...bindPassword}\n        name=\"password\"\n        validators={[\"required\"]}\n        errorMessages={[\"this field is required\"]}\n        margin=\"normal\"\n      />\n      <Button\n        variant=\"contained\"\n        fullWidth\n        color=\"primary\"\n        type=\"submit\"\n        disabled={isFetching}\n        margin=\"normal\"\n      >\n        {isFetching && <CircularProgress size={20} />} Sign In\n      </Button>\n    </ValidatorForm>\n  );\n}\n\n\n\n\nexport default SignInForm;\n"]},"metadata":{},"sourceType":"module"}