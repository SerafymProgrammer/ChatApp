{"ast":null,"code":"var _jsxFileName = \"/home/serafym/\\u041E\\u0431\\u0449\\u0435\\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u044B\\u0435/development/ChatApp/chat-app/FrontendReact/src/components/chatPage/chat.jsx\";\nimport React, { Component } from \"react\";\nimport ChatService from \"../../services/chat.service\";\nimport InputMessageForm from \"./inputMessage\";\nimport MessageContainer from \"./messageContainer\";\nimport UsersList from \"./usersContainer\";\nimport io from \"socket.io-client\";\nimport * as actions from \"../../redux/actions/chatActions/chat.actions\";\nimport * as authActions from \"../../redux/actions/authActions/auth.actions\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport jwt from \"jwt-decode\";\nimport { Container } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/core/styles\";\nimport Header from \"./chatHeader\";\nimport Box from \"@material-ui/core/Box\";\nconst ChatContainer = styled(Container)({\n  background: \"#6d81af\",\n  display: \"flex\",\n  flexDirection: \"row-reverse\",\n  margin: 0,\n  padding: 0,\n  height: 815,\n  position: 'relative',\n  maxHeight: 1000,\n  [\"@media (max-height:900px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 715,\n    maxHeight: 900\n  },\n  [\"@media (max-height:800px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 615,\n    maxHeight: 800\n  },\n  [\"@media (max-height:700px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 515,\n    maxHeight: 700\n  },\n  [\"@media (max-height:600px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 415,\n    maxHeight: 600\n  },\n  [\"@media (max-height:500px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 315,\n    maxHeight: 500\n  },\n  [\"@media (max-height:400px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 250,\n    maxHeight: 400\n  }\n});\n\nclass ChatPage extends Component {\n  constructor(props) {\n    super(props);\n    this.colorNickName = \"white\";\n\n    this.handleNewUserMessage = newMessage => {\n      console.log(`New message incomig! ${newMessage}`); // Now send the message throught the backend API\n    };\n\n    this.state = {\n      messages: [],\n      isAdmin: false,\n      currentUser: \"\",\n      isMuted: false,\n      showUsersContainer: true,\n      usersListMobile: false\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    debugger;\n  }\n\n  componentWillUnmount() {\n    this.props.isConnected(false);\n  }\n\n  async componentDidMount() {\n    let token = await localStorage.getItem(\"userToken\");\n\n    if (!token) {\n      window.location.href = '/login';\n      return;\n    }\n\n    const decodedUser = jwt(token);\n    window.matchMedia(\"(max-width: 400px)\").addListener(e => {\n      this.setState({\n        usersListMobile: e.matches\n      });\n\n      if (e.matches) {\n        this.setState({\n          showUsersContainer: false\n        });\n      }\n    });\n    await this.props.initConnection();\n    const {\n      socket\n    } = this.props;\n    socket.on(\"users\", res => {\n      this.props.setOnlineUsers(res);\n    });\n    socket.on(\"previousMessages\", res => this.setState({\n      messages: res\n    }));\n    socket.on(\"error\", res => {\n      alert(res.msg);\n      window.location.href = '/login';\n    });\n    socket.on(\"initialMuteStatus\", IsMute => {\n      this.setState({\n        isMuted: IsMute\n      });\n    });\n    socket.on(\"mute\", IsMute => {\n      console.log(IsMute);\n      this.props.setIsMuteStatus(IsMute);\n      this.setState({\n        isMuted: IsMute\n      });\n    });\n    socket.on(\"chat\", res => this.setState({\n      messages: [...this.state.messages, res]\n    }));\n    socket.on(\"disconnect\", socket => {\n      localStorage.removeItem(\"userToken\");\n      window.location.href = '/login';\n    });\n    this.colorNickName = decodedUser.nickNameColor;\n    this.setState({\n      isAdmin: decodedUser.isAdmin,\n      currentUser: decodedUser.nickName\n    });\n    this.props.isConnected(true);\n  }\n\n  async setMuteStatus(user) {\n    this.props.socket.emit(\"mute\", user.id);\n  }\n\n  async setBan(user) {\n    this.props.socket.emit(\"ban\", user.id);\n  }\n\n  async sendMsg(message) {\n    this.setState({\n      messages: [...this.state.messages, message]\n    });\n    this.props.socket.emit(\"chat\", JSON.stringify(message));\n  }\n\n  async logout() {\n    await localStorage.removeItem(\"userToken\");\n    this.props.socket.disconnect(true);\n    window.location.href = '/login';\n  }\n\n  render() {\n    const {\n      isConnected,\n      onlineUsers\n    } = this.props;\n    const {\n      isAdmin,\n      currentUser,\n      showUsersContainer,\n      usersListMobile\n    } = this.state;\n    return isConnected && onlineUsers.length > 0 ? /*#__PURE__*/React.createElement(Container, {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      username: currentUser,\n      colorNickName: this.colorNickName,\n      showHideUsersList: () => this.setState({\n        showUsersContainer: !this.state.showUsersContainer\n      }),\n      logout: () => this.logout(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ChatContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(UsersList, {\n      users: onlineUsers,\n      isAdmin: isAdmin,\n      userName: currentUser,\n      setMuteStatus: user => this.setMuteStatus(user),\n      setBan: user => this.setBan(user),\n      showUsersContainer: showUsersContainer,\n      usersListMobile: usersListMobile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(MessageContainer, {\n      messages: this.state.messages,\n      username: this.state.currentUser,\n      colorNickName: this.colorNickName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    })), !this.state.isMuted ? /*#__PURE__*/React.createElement(InputMessageForm, {\n      handleSubmit: message => this.sendMsg(message),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }\n    }) : null) : null; // isConnected && onlineUsers.length > 0 ?\n    //  : null;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isConnected: state.chatReducer.isConnected,\n    onlineUsers: state.chatReducer.onlineUsers,\n    messages: state.chatReducer.messages,\n    socket: state.chatReducer.socket,\n    isMuted: state.chatReducer.isMuted\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    initConnection: () => dispatch(actions.initWebSocketConnection(dispatch)),\n    setOnlineUsers: onlineUsers => dispatch(actions.allOnlineUsers(onlineUsers)),\n    isConnected: status => dispatch(actions.isConnected(status)),\n    setIsMuteStatus: status => dispatch(actions.setIsMuteStatus(status)),\n    setIsLoggedIn: status => dispatch(authActions.isSignedInUser(status))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatPage);","map":{"version":3,"sources":["/home/serafym/Общедоступные/development/ChatApp/chat-app/FrontendReact/src/components/chatPage/chat.jsx"],"names":["React","Component","ChatService","InputMessageForm","MessageContainer","UsersList","io","actions","authActions","connect","moment","jwt","Container","styled","Header","Box","ChatContainer","background","display","flexDirection","margin","padding","height","position","maxHeight","ChatPage","constructor","props","colorNickName","handleNewUserMessage","newMessage","console","log","state","messages","isAdmin","currentUser","isMuted","showUsersContainer","usersListMobile","UNSAFE_componentWillMount","componentWillUnmount","isConnected","componentDidMount","token","localStorage","getItem","window","location","href","decodedUser","matchMedia","addListener","e","setState","matches","initConnection","socket","on","res","setOnlineUsers","alert","msg","IsMute","setIsMuteStatus","removeItem","nickNameColor","nickName","setMuteStatus","user","emit","id","setBan","sendMsg","message","JSON","stringify","logout","disconnect","render","onlineUsers","length","mapStateToProps","chatReducer","mapDispatchToProps","dispatch","initWebSocketConnection","allOnlineUsers","status","setIsLoggedIn","isSignedInUser"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ChatService from \"../../services/chat.service\";\nimport InputMessageForm from \"./inputMessage\";\nimport MessageContainer from \"./messageContainer\";\nimport UsersList from \"./usersContainer\";\nimport io from \"socket.io-client\";\nimport * as actions from \"../../redux/actions/chatActions/chat.actions\";\nimport * as authActions from \"../../redux/actions/authActions/auth.actions\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport jwt from \"jwt-decode\";\nimport { Container } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/core/styles\";\nimport Header from \"./chatHeader\";\nimport Box from \"@material-ui/core/Box\";\n\nconst ChatContainer = styled(Container)({\n  background: \"#6d81af\",\n  display: \"flex\",\n  flexDirection: \"row-reverse\",\n  margin: 0,\n  padding: 0,\n  height: 815,\n  position: 'relative',\n  maxHeight: 1000,\n  [\"@media (max-height:900px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 715,\n    maxHeight: 900,\n  },\n  [\"@media (max-height:800px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 615,\n    maxHeight: 800,\n  },\n  [\"@media (max-height:700px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 515,\n    maxHeight: 700,\n  },\n  [\"@media (max-height:600px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 415,\n    maxHeight: 600,\n  },\n  [\"@media (max-height:500px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 315,\n    maxHeight: 500,\n  },\n  [\"@media (max-height:400px)\"]: {\n    // eslint-disable-line no-useless-computed-key\n    height: 250,\n    maxHeight: 400,\n  },\n});\n\nclass ChatPage extends Component {\n  colorNickName = \"white\";\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n      isAdmin: false,\n      currentUser: \"\",\n      isMuted: false,\n      showUsersContainer: true,\n      usersListMobile: false\n    };\n  }\n  UNSAFE_componentWillMount() {\n    debugger;\n  }\n\n  componentWillUnmount() {\n    this.props.isConnected(false);\n  }\n\n  async componentDidMount() {\n    let token = await localStorage.getItem(\"userToken\");\n    if (!token) {\n      window.location.href = '/login';\n      return;\n    }\n    const decodedUser = jwt(token);\n    window.matchMedia(\"(max-width: 400px)\").addListener((e)=>{ this.setState({usersListMobile: e.matches}); if(e.matches) {\n      this.setState({showUsersContainer: false});\n    }});\n    await this.props.initConnection();\n\n    const {socket} = this.props;\n    socket.on(\"users\", (res) => {\n      this.props.setOnlineUsers(res);\n    });\n    socket.on(\"previousMessages\", (res) =>\n      this.setState({\n        messages: res,\n      })\n    );\n    socket.on(\"error\", (res) =>{\n      alert(res.msg);\n      window.location.href = '/login';\n    });\n    socket.on(\"initialMuteStatus\", (IsMute) =>{\n      this.setState({ isMuted: IsMute });\n    });\n    socket.on(\"mute\", (IsMute) => {\n      console.log(IsMute);\n      this.props.setIsMuteStatus(IsMute);\n      this.setState({ isMuted: IsMute });\n    });\n    socket.on(\"chat\", (res) =>\n      this.setState({\n        messages: [...this.state.messages, res],\n      })\n    );\n\n    socket.on(\"disconnect\", (socket) => {\n      localStorage.removeItem(\"userToken\");\n      window.location.href = '/login';\n    });\n    \n    this.colorNickName = decodedUser.nickNameColor;\n    this.setState({\n      isAdmin: decodedUser.isAdmin,\n      currentUser: decodedUser.nickName,\n    });\n\n    this.props.isConnected(true);\n  }\n\n  async setMuteStatus(user) {\n    this.props.socket.emit(\"mute\", user.id);\n  }\n\n  async setBan(user) {\n    this.props.socket.emit(\"ban\", user.id);\n  }\n  handleNewUserMessage = (newMessage) => {\n    console.log(`New message incomig! ${newMessage}`);\n    // Now send the message throught the backend API\n  };\n\n  async sendMsg(message) {\n    this.setState({\n      messages: [...this.state.messages, message],\n    });\n    this.props.socket.emit(\"chat\", JSON.stringify(message));\n  }\n\n  async logout() {\n    await localStorage.removeItem(\"userToken\");\n    this.props.socket.disconnect(true);\n    window.location.href = '/login';\n  }\n\n  render() {\n    const { isConnected, onlineUsers } = this.props;\n\n    const { isAdmin, currentUser, showUsersContainer, usersListMobile} = this.state;\n\n    return isConnected && onlineUsers.length>0 ? (\n      <Container style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <Header\n          username={currentUser}\n          colorNickName={this.colorNickName}\n          showHideUsersList={() =>\n            this.setState({\n              showUsersContainer: !this.state.showUsersContainer,\n            })\n          }\n          logout={() => this.logout()}\n        />\n        <ChatContainer>\n          <UsersList\n            users={onlineUsers}\n            isAdmin={isAdmin}\n            userName={currentUser}\n            setMuteStatus={(user) => this.setMuteStatus(user)}\n            setBan={(user) => this.setBan(user)}\n            showUsersContainer={showUsersContainer}\n            usersListMobile = {usersListMobile}\n          />\n          <MessageContainer\n            messages={this.state.messages}\n            username={this.state.currentUser}\n            colorNickName={this.colorNickName}\n          />\n        </ChatContainer>\n        {!this.state.isMuted ? (\n          <InputMessageForm handleSubmit={(message) => this.sendMsg(message)} />\n        ) : null}\n      </Container>\n    ) : null;\n    // isConnected && onlineUsers.length > 0 ?\n\n    //  : null;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isConnected: state.chatReducer.isConnected,\n    onlineUsers: state.chatReducer.onlineUsers,\n    messages: state.chatReducer.messages,\n    socket: state.chatReducer.socket,\n    isMuted: state.chatReducer.isMuted,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    initConnection: () => dispatch(actions.initWebSocketConnection(dispatch)),\n    setOnlineUsers: (onlineUsers) =>\n      dispatch(actions.allOnlineUsers(onlineUsers)),\n    isConnected: (status) => dispatch(actions.isConnected(status)),\n    setIsMuteStatus: (status) => dispatch(actions.setIsMuteStatus(status)),\n    setIsLoggedIn: (status) => dispatch(authActions.isSignedInUser(status)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatPage);\n"]},"metadata":{},"sourceType":"module"}